"""Validate conversation JSON artefacts by re-running their unit tests."""

import argparse
import sys
from pathlib import Path

from synthetic_debug.validation import (
    ValidationError,
    extract_code_artifacts,
    load_conversation,
    run_tests_for_variant,
)


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "inputs",
        nargs="+",
        type=Path,
        help="Conversation JSON files generated by the pipeline.",
    )
    parser.add_argument(
        "--dump-dir",
        type=Path,
        default=None,
        help="Optional directory where extracted code artefacts will be written.",
    )
    parser.add_argument(
        "--skip-buggy",
        action="store_true",
        help="Only run unit tests against the correct implementation.",
    )
    return parser.parse_args()


def main() -> int:
    args = parse_args()
    overall_exit = 0

    if args.dump_dir is not None:
        args.dump_dir.mkdir(parents=True, exist_ok=True)

    for path in args.inputs:
        print(f"Validating {path}...")
        try:
            conversation = load_conversation(path)
        except ValidationError as exc:
            print(f"  ! Failed to load conversation: {exc}")
            overall_exit = 1
            continue

        if args.dump_dir is not None:
            target_dir = args.dump_dir / path.stem
            extract_code_artifacts(conversation, target_dir)
            print(f"  - Extracted artefacts to {target_dir}")

        correct_result = run_tests_for_variant(conversation, "correct")
        if correct_result.returncode == 0:
            print("  - Correct implementation: PASS")
        else:
            print("  ! Correct implementation failed its tests:")
            print(correct_result.stdout)
            print(correct_result.stderr, file=sys.stderr)
            overall_exit = 1
            continue

        # Skip buggy run if requested or if buggy_code was not present
        if args.skip_buggy or not (conversation.buggy_code and conversation.buggy_code.strip()):
            continue

        buggy_result = run_tests_for_variant(conversation, "buggy")
        if buggy_result.returncode != 0:
            print("  - Buggy implementation: expected failure observed")
            print(buggy_result.stdout)
            print(buggy_result.stderr, file=sys.stderr)
        else:
            print("  ! Buggy implementation unexpectedly passed its tests")
            overall_exit = 1

    return overall_exit


if __name__ == "__main__":
    raise SystemExit(main())
